#!/usr/bin/env ruby

#--
# Copyright 2009 by Stefan Rusterholz.
# All rights reserved.
# See LICENSE.txt for permissions.
#++



Version = "0.3.2"



require 'optparse'
begin
  # if baretest is installed as a gem, the executable is be wrapped by rubgems anyway, so we don't
  # need to require rubygems ourself.
  require 'baretest'
rescue LoadError
  # assume baretest is not installed and this is a cold-run from source
  $LOAD_PATH.unshift(File.expand_path("#{__FILE__}/../../lib"))
  require 'baretest'
end



# Get all the command-line arguments and adapt options to it
format      = ENV['FORMAT'] || 'cli'
interactive = ['false', nil].include?(ENV['INTERACTIVE']) ? false : true
setup_path  = nil

opts = OptionParser.new("", 24, '  ') do |opts|
  opts.banner = "Usage: baretest [options] [glob, ...]"

  opts.separator "Glob defaults to 'test/**/*.rb'"
  opts.separator "Providing a directory as glob is equivalent to dir/**/*.rb\n"
  opts.separator "Options:"

  opts.on("-f", "--format FORMAT", "use FORMAT for output") { |use|
    format = use
  }

  opts.on("-F", "--formats", "show available formats") { |use|
    puts "Available formats:"
    Dir.glob("{#{$LOAD_PATH.join(',')}}/baretest/run/*.rb") { |path|
      puts "- #{File.basename(path, '.rb')}"
    }
    exit
  }

  opts.on("-d", "--debug", "set debugging flags (set $DEBUG to true)") {
    $DEBUG   = true
    $VERBOSE = true
  }

  opts.on("-i", "--interactive", "drop into IRB on error or failure") {
    interactive = true
  }

  opts.on("-s", "--setup FILE", "specify setup file") { |path|
    setup_path = path
  }

  opts.on("-v", "--version", "print the version and exit") {
    puts "baretest executable version #{Version}, library version #{BareTest::VERSION}"
    exit
  }

  opts.on("-w", "--warn", "turn warnings on for your script") {
    $VERBOSE = true
  }

  opts.parse! ARGV
end



# Load the setup file, all helper files and all test files
if ARGV.empty? then
  BareTest.load_standard_test_files(
    :verbose    => $VERBOSE,
    :setup_path => setup_path,
    :chdir      => '.'
  )
else
  load(setup_path) if setup_path && File.exist?(setup_path)
  ARGV.each { |path|
    if File.directory?(path) then
      Dir.glob("#{path}/**/*.rb") { load(path) }
    else
      Dir.glob(path) { load(path) }
    end
  }
end



# Run the tests
puts if $VERBOSE
BareTest.run(:format => format, :interactive => interactive)
